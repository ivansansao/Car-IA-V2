class Genetic {

    constructor() {

        this.quantidade = 4;
        this.pesos = '';
        this.shapes = '';
        this.melhor = null;
        this.melhorCorrente = null;
        this.pesos = [];
        this.shapes = '22,8;8;8,9;9';

        // Sem pista.
        this.pesos.push('');

        // Pista 1
        this.pesos.push('-0.0179524477571249,-0.04437238723039627,0.08185151219367981,0.09520047158002853,-0.385092556476593,0.19724732637405396,0.1237185001373291,-0.06338256597518921,1.566709280014038,-0.270739883184433,0.7560867071151733,-0.2331341654062271,-0.23581565916538239,-1.2531074285507202,0.32923924922943115,-0.2146492749452591,0.15168942511081696,-0.07108508795499802,-0.17661991715431213,0.07175277173519135,0.23320171236991882,-0.272798627614975,0.3657071590423584,0.09415274113416672,0.06807831674814224,0.17878572642803192,-0.11551899462938309,-0.020972825586795807,0.30205807089805603,-0.09119099378585815,-0.3349117040634155,0.2952057123184204,-0.47856825590133667,-0.13946513831615448,0.10616615414619446,1.520184874534607,0.1623045802116394,0.19997701048851013,0.017276311293244362,0.033160462975502014,0.18849967420101166,1.188737154006958,0.06884343177080154,-0.2946735620498657,-0.09796760231256485,-0.12444498389959335,0.28243428468704224,0.11697158217430115,-0.1317303478717804,0.16166268289089203,0.35642683506011963,0.6080654263496399,-0.2894786298274994,-0.09969548135995865,-0.18787556886672974,-0.37247076630592346,0.12478846311569214,-0.9267023205757141,0.5630527138710022,-0.2457096129655838,-0.12772005796432495,0.09696397185325623,-0.1620897650718689,0.4621514081954956,0.31308260560035706,0.03982288017868996,-0.3469054400920868,-1.3564386367797852,0.004182605538517237,0.15558087825775146,0.18082450330257416,0.15190252661705017,0.11375369131565094,-0.506252646446228,-0.22739747166633606,-0.07488903403282166,-0.2785661518573761,0.8099858164787292,-0.035846829414367676,0.3080045282840729,0.46918487548828125,-0.6243537664413452,-0.018771793693304062,0.09771919250488281,-0.19458718597888947,-0.07943561673164368,0.05389393866062164,0.8611940145492554,-0.30244868993759155,1.3452447652816772,-0.12320582568645477,0.10487211495637894,0.21837569773197174,0.3406694531440735,0.08526774495840073,-0.36310014128685,0.23607337474822998,0.3305451571941376,-0.37945234775543213,-0.25492599606513977,0.0682314857840538,-0.46676093339920044,-0.06115955859422684,0.024788150563836098,0.3452170193195343,-0.31325408816337585,-0.2805209457874298,0.10767737030982971,-0.03910224139690399,-0.5030214786529541,-0.0898054987192154,-0.327277272939682,0.41069135069847107,0.0333954393863678,-0.4944550693035126,-0.23280830681324005,0.08790863305330276,0.2575017511844635,-0.16371065378189087,0.07410398870706558,0.49757274985313416,0.15810371935367584,0.23505420982837677,-0.572344183921814,0.15884074568748474,-0.028911998495459557,0.042895808815956116,0.33252835273742676,0.1521066427230835,-0.22623111307621002,0.26244229078292847,-0.08588148653507233,-2.720733642578125,-0.2699497938156128,-0.27051666378974915,0.1024727150797844,-0.08318343013525009,0.03799587860703468,0.263071745634079,0.39213696122169495,0.32462865114212036,0.10573217272758484,0.7926983833312988,-0.3940197825431824,-0.024865301325917244,-0.32865607738494873,-0.3257153034210205,0.9848143458366394,-1.1595020294189453,0.36957040429115295,-0.019511492922902107,-0.3291968107223511,-0.1900911033153534,-1.9183756113052368,0.08134669065475464,-0.5244364738464355,-0.22849886119365692,1.9314978122711182,0.19902153313159943,0.34307563304901123,0.0059909275732934475,0.057369414716959,0.20125624537467957,-0.3094848394393921,0.27771198749542236,0.3840375244617462,-0.30896443128585815,-0.2018854320049286,0.2460600882768631,-0.1404835730791092,0.15096627175807953,-0.21715256571769714,1.6431456804275513,-0.0990428626537323,-0.02979367785155773,-0.06040643900632858;0,1.1473145484924316,0,0,-3.310288667678833,0,-0.013203625567257404,0;-0.11769936978816986,0.16937915980815887,-0.20264552533626556,-0.06447606533765793,0.9039772152900696,0.1494407206773758,0.46519309282302856,-0.1224612444639206,0.6786810755729675,-0.8251990079879761,0.15702353417873383,0.30998435616493225,-1.4794461727142334,-0.04232131689786911,-0.05415308475494385,0.3334486484527588,0.27538061141967773,0.0035652010701596737,-0.00895486120134592,1.4208488464355469,0.563092827796936,-0.32860490679740906,-0.15056918561458588,-0.3081356883049011,-0.310271292924881,1.3100587129592896,0.026366086676716805,0.3614598214626312,-0.21397684514522552,1.2848334312438965,-0.5300213098526001,-0.6447978019714355,-0.5113159418106079,0.030620375648140907,-0.15085984766483307,-0.1556524783372879,0.6402912139892578,-0.21420696377754211,0.33993232250213623,0.020111655816435814,-0.027116911485791206,0.8221223950386047,-0.1130407378077507,0.004149127285927534,-0.28321558237075806,1.3128257989883423,-1.4351404905319214,0.16395674645900726,0.24335120618343353,1.0543386936187744,-0.16724246740341187,-0.24164238572120667,0.12423964589834213,0.09523453563451767,0.04384663328528404,0.03494676947593689,0.2000545859336853,-0.11365890502929688,-0.17276600003242493,-0.2159542441368103,-0.22851604223251343,0.02589493989944458,-0.13148082792758942,-0.19258499145507812,-0.25774654746055603,-0.09699728339910507,-0.3092118501663208,-0.024384817108511925,-0.1783895641565323,0.4037737548351288,-0.3005206286907196,-0.18728633224964142;0.23944294452667236,0,0,0,-0.19004404544830322,0.8746244311332703,0.10084348917007446,0,1.3984278440475464');

        // Pista 2
        this.pesos.push('');

        // Pista 3
        this.pesos.push('');

        // Pista 4
        // this.pesos.push('2.0873522758483887,-3.6411120891571045,-1.4405946731567383,1.5019781589508057,-2.1343016624450684,-2.0960280895233154,-2.0692834854125977,-2.078049659729004,-0.6825304627418518,0.0678774043917656,0.010214385576546192,-2.6296846866607666,-0.8898820877075195,-1.1335586309432983,-0.33218759298324585,-0.9582727551460266,-0.4267112612724304,-1.538336992263794,-1.26166832447052,-0.18445861339569092,0.3630429208278656,0.27789297699928284,0.08211462944746017,-0.320809543132782,-0.4883841276168823,-0.7261651158332825,-1.3505024909973145,-0.30450865626335144,-0.41539788246154785,1.9070738554000854,-1.3514891862869263,2.7882585525512695,2.0073723793029785,0.7147091031074524,-0.8366544246673584,-0.6445643901824951,-0.4824182987213135,-0.1628899723291397,-0.03383464738726616,0.9442556500434875,1.8883196115493774,-1.0762109756469727,2.435589551925659,2.5832724571228027,-2.4687397480010986,-0.5750814080238342,-0.10952915996313095,-1.3869004249572754,-0.23576116561889648,-0.45446428656578064,-0.31080734729766846,-0.23007583618164062,-0.9502880573272705,0.5620447993278503,-1.1190587282180786,0.3897942006587982,0.14398974180221558,-0.2818756699562073,-0.3071620762348175,-1.532108187675476,0.5932875871658325,0.3319491744041443,1.365993618965149,0.038587093353271484,-0.6476452350616455,-1.2674566507339478,2.6139814853668213,1.3961155414581299,2.8012683391571045,1.9103100299835205,-0.9305809140205383,-0.1265510469675064,-0.982959508895874,0.5071749091148376,-0.6864442825317383,1.6274043321609497,-0.7534683346748352,1.1015421152114868,-0.7287241220474243,0.30162563920021057,0.20073826611042023,3.028747081756592,-0.19989527761936188,-1.1755822896957397,0.7847869396209717,-0.5315036773681641,0.18655851483345032,2.039512872695923,0.26587581634521484,1.7379337549209595,1.5144450664520264,-0.8212171196937561,-1.0325051546096802,-0.48759132623672485,-2.2356371879577637,0.22210170328617096,-0.47870680689811707,-1.9988467693328857,0.16912201046943665,-3.1803786754608154,0.43114176392555237,0.4183242917060852,-0.6229956746101379,-0.4607967138290405,0.05679164081811905;1.1665722131729126,2.060788869857788,-2.323072671890259,-0.46641671657562256,2.2094218730926514;-0.07856299728155136,-0.4289630353450775,-0.9657902121543884,3.9335663318634033,-1.0862452983856201,0.5480166077613831,1.717172622680664,-0.862529993057251,1.7365891933441162,-2.3227381706237793,0.7284345030784607,-1.1878567934036255,0.3017784059047699,1.5445128679275513,-0.26335471868515015,1.741082787513733,0.017803413793444633,-0.09289883077144623,-2.1238296031951904,1.5657107830047607,0.13286474347114563,-1.798479437828064,-7.62481689453125,1.868698239326477,-2.2198100090026855,-2.1695263385772705,-0.4750554859638214,-0.09300097078084946,-2.8974449634552,0.4301746189594269,2.359339475631714,-6.750847816467285,-6.999271869659424,0.2883913516998291,-0.40261605381965637,2.29374361038208,0.21024395525455475,-0.36295825242996216,1.6576807498931885,-1.0795440673828125,0.2450098693370819,2.8591372966766357,5.594165802001953,2.6084656715393066,-0.5508983731269836;-2.6879611015319824,-4.628468036651611,1.8679711818695068,2.02142596244812,4.432284832000732,-5.823111534118652,-3.602963924407959,-3.003915786743164,-2.721201181411743');
        // this.pesos.push('-1.8234297037124634,0.2819163203239441,0.12697643041610718,-0.017648231238126755,0.12852360308170319,-1.9963377714157104,-0.43111366033554077,-0.5492298603057861,-0.19831028580665588,-0.476641982793808,0.13436710834503174,-0.968135416507721,1.4066436290740967,1.9403839111328125,-0.4896113872528076,0.0054653482511639595,-2.014740467071533,-0.11512479186058044,0.10463287681341171,-0.7301471829414368,-0.08937225490808487,0.29870742559432983,0.46009331941604614,-0.030235502868890762,1.2605341672897339,0.14902454614639282,0.1339215636253357,-0.2748214602470398,0.3654490113258362,-0.009716842323541641,1.4326460361480713,1.193799376487732,0.8268287181854248,0.0673651248216629,-2.04913067817688,0.1244109719991684,-0.7149370312690735,-0.08108090609312057,0.295240581035614,-0.07106305658817291,-0.4717242419719696,-0.9644284844398499,0.22160162031650543,0.032273225486278534,-0.027488481253385544,0.1891053318977356,-0.015470103360712528,0.042018238455057144,-0.4347110390663147,0.09239168465137482,0.4993373453617096,-0.17200025916099548,0.024573098868131638,0.05717194080352783,0.04713907837867737,0.24160850048065186,-0.22806692123413086,-0.1083999052643776,-0.11305873095989227,0.2834556996822357,0.03334331139922142,0.6900340914726257,-1.1528998613357544,-0.060373060405254364,-0.1320943683385849,0.1817135512828827,0.05533218756318092,-0.06931731849908829,0.5393355488777161,0.1049327403306961,-0.29673197865486145,0.9140715003013611,0.08411981910467148,0.9920897483825684,-0.37183281779289246,-0.03209925815463066,0.40522608160972595,0.5439281463623047,0.8462356925010681,0.9043749570846558,-0.21229584515094757,0.18906819820404053,0.052707478404045105,0.19396653771400452,0.19451715052127838,0.14384064078330994,-0.3873835802078247,0.014833876863121986,0.10988955944776535,-1.0888675451278687,0.36453041434288025,2.6243643760681152,0.23165278136730194,2.337369203567505,-0.09282759577035904,-0.15893708169460297,-0.2804735004901886,0.342704713344574,-1.7552472352981567,0.047039616852998734,0.09856289625167847,-0.2631092965602875,0.3588275909423828,0.4082159101963043,0.06947829574346542,1.630454182624817,-0.004580207634717226,0.8484137654304504,-0.17401450872421265,0.05226229503750801,-0.128570094704628,0.02885054051876068,0.7282664179801941,0.6496295928955078,-0.7260237336158752,-0.08427166938781738,-0.2523884177207947,-0.20291215181350708,-0.23009908199310303,0.3354995548725128;-0.6182486414909363,-2.3778882026672363,-0.2625258266925812,-2.412165641784668,0;0.1431141346693039,-0.184214785695076,-0.10803774744272232,0.46076735854148865,1.3308007717132568,-0.21750731766223907,-0.7122610807418823,0.6543715000152588,0.19405269622802734,-0.6388814449310303,-0.1461353749036789,-1.169546127319336,-0.7195382714271545,0.03867826983332634,0.75890052318573,0.21278874576091766,0.4019259810447693,-0.7742186784744263,-1.6329259872436523,-0.3049646019935608,0.2553851902484894,-0.27780282497406006,-0.7685914635658264,-1.353684425354004,-0.19085325300693512,0.4885842800140381,-0.03782186657190323,1.1857521533966064,-2.23880672454834,-3.5022637844085693,-0.5451423525810242,-1.1127482652664185,1.5520529747009277,-0.008009424433112144,0.05856233090162277,1.4740186929702759,0.41688427329063416,-0.31409183144569397,-0.48169898986816406,-1.0290250778198242,-0.28052380681037903,-0.3700401186943054,0.35392630100250244,0.4333619177341461,-0.03432948887348175;0,-0.07691037654876709,0,-1.2630349397659302,0,0,0,-1.004424810409546,1.3361929655075073');
        this.pesos.push('0.16353340446949005,1.1934739351272583,0.5987368226051331,0.4329759180545807,0.034134503453969955,0.21939727663993835,-0.14563027024269104,0.03188218176364899,-0.8861546516418457,-0.5627967119216919,0.3216564953327179,0.06862777471542358,0.8710237145423889,-0.1109505295753479,0.08859457820653915,-0.9709595441818237,0.5793452858924866,-0.32670846581459045,-1.1776913404464722,-0.24060270190238953,-0.37598565220832825,0.30313190817832947,-0.4047375023365021,0.08891800791025162,-0.13815592229366302,0.04314025491476059,-0.37913909554481506,0.03862752765417099,-0.030250007286667824,-0.18424111604690552,-0.18416401743888855,0.34189948439598083,0.4535495638847351,-1.5839898586273193,-0.3915691375732422,-1.3143812417984009,-0.23492540419101715,0.04458777233958244,-0.3376989960670471,-0.5149865746498108,-1.4699381589889526,0.1607779562473297,0.42754247784614563,0.04072339087724686,1.6559884548187256,0.3630189895629883,-0.16326318681240082,-0.05022066459059715,-0.1177632138133049,-0.04453884810209274,-0.23137670755386353,-0.0856623649597168,-0.34097665548324585,1.338101863861084,-1.5722423791885376,0.7395153045654297,-0.24575279653072357,0.2606160044670105,0.4586108922958374,1.2695112228393555,0.08393105119466782,-1.2012971639633179,0.08400896936655045,0.4546836018562317,0.6692824363708496,-1.2101391553878784,-1.2770615816116333,-0.045935433357954025,-0.06714730709791183,2.819704532623291,0.14939464628696442,1.6989963054656982,-0.6840296983718872,-0.06599558889865875,0.08832789957523346,0.3184960186481476,-1.4395418167114258,0.05514509603381157,0.06580799072980881,-0.614538848400116,-0.4851855933666229,0.0713750496506691,-0.2932884693145752,2.2369301319122314,-1.3576360940933228,0.8142867088317871,0.0547611266374588,-0.5003901720046997,-0.016805846244096756,0.807148814201355,-0.1897699385881424,0.48076680302619934,-0.9215028285980225,-0.729404628276825,0.24624505639076233,-0.7204643487930298,-0.3326311409473419,-0.06648928672075272,-0.025533156469464302,0.2800792455673218,-0.9952784776687622,0.25219011306762695,-0.10282435268163681,0.052337396889925,0.21479889750480652,0.1980000138282776,0.08300305902957916,-0.0775776281952858,1.4648786783218384,0.35039955377578735,1.0944489240646362,-1.3607758283615112,-0.3450913429260254,0.04072465002536774,0.6805242896080017,-0.3382737636566162,0.24951887130737305,-0.16905030608177185,-0.01743384823203087,0.39154723286628723,-3.4965193271636963,0.009940264746546745,-0.34901073575019836,0.016379378736019135,-1.1123926639556885,0.21746955811977386,-0.08590131253004074,-1.7304435968399048,0.23820994794368744,-0.5401631593704224,0.3505595922470093,-1.1280964612960815,-0.32168102264404297,0.25092431902885437,1.500362753868103,-0.05627598240971565,-0.041628096252679825,-3.8632400035858154,0.3337973654270172,0.3517218828201294,-1.1404623985290527,0.4592992067337036,-0.5082588195800781,0.9801802039146423,-0.6573883891105652,-0.39616912603378296,0.25882935523986816,-0.1308974325656891,-0.13640737533569336,-0.0976140946149826,1.2625170946121216,-0.7486998438835144,-0.5125293135643005,2.3123176097869873,0.7982367277145386,-0.37519434094429016,0.36656510829925537,1.3636856079101562,-0.38694506883621216,0.03765033558011055,0.14352558553218842,-0.019178232178092003,0.19963224232196808,0.3712426722049713,0.07294873893260956,-0.33282729983329773,-0.292157381772995,0.19630995392799377,-0.12970609962940216,-0.46718263626098633,-0.32227814197540283,0.8003854751586914,-2.091850519180298,-0.046041496098041534,0.8719251751899719,1.4915095567703247;0,0,1.3043118715286255,0.6702790856361389,0,0.411201536655426,0,0.9776157140731812;-0.27720290422439575,-1.0865061283111572,1.0143808126449585,-0.3050765097141266,0.6078701019287109,1.0870417356491089,1.1811206340789795,0.2106866091489792,0.33229419589042664,-1.3857277631759644,-0.2759794592857361,-0.8806050419807434,0.25446972250938416,-0.32085010409355164,-2.151657819747925,-0.49407681822776794,0.28660351037979126,-0.1043260395526886,-1.0086238384246826,-0.0805569589138031,0.48782283067703247,0.13732792437076569,-0.9536316394805908,-0.15903228521347046,-0.051224831491708755,-1.897931694984436,0.43699848651885986,-0.6437256336212158,-0.9170936346054077,-1.4045253992080688,0.6413863897323608,-0.3978002071380615,0.3172028958797455,0.7646055221557617,0.20004279911518097,-0.1252327263355255,-0.2206614464521408,0.5324968099594116,-0.17574167251586914,-0.13598328828811646,-0.31036993861198425,-0.8881619572639465,1.907435655593872,-0.3134223520755768,-0.1372402161359787,-0.39596715569496155,0.01939699798822403,0.08721417188644409,0.04767432436347008,-4.075420379638672,0.9486019015312195,-0.08366352319717407,-0.01029503345489502,0.46701890230178833,-0.34174853563308716,-0.15716752409934998,-0.3928278088569641,0.022514212876558304,0.043697431683540344,-1.1968779563903809,0.17742441594600677,-2.423649549484253,-0.04499458149075508,-0.04519610106945038,0.2375003695487976,-0.4828699231147766,-0.4730883836746216,-1.9100980758666992,-0.5167577862739563,1.3400636911392212,-0.06902086734771729,-0.04976518452167511;-0.927804172039032,-0.33493688702583313,0,-1.4361599683761597,1.0004695653915405,-2.778998374938965,0,1.6408360004425049,-0.8728046417236328');

        // Pista 5
        this.pesos.push('');

        // Pista 6
        this.pesos.push('');
    }

    firstGeneration() {

        console.log('Primeira geração...');

        cars = [];

        // Novos
        for (let i = 0; i < quantidade; i++) {
            cars.push(new Car());
        }

        let child = new Car('X');
        let pesos;
        if (pesosForcados != undefined) {
            pesos = this.pesos[pesosForcados];
            console.log(`Pesos da pista ${pesosForcados}`);
        } else {
            pesos = this.pesos[pista.selectedPista];
        }

        if (pesos.length > 0) {
            child.ia.setWeightsFromString(pesos, this.shapes);
        }
        cars.push(child);
        this.melhor = child;

        vivos = cars.length;

    }

    nextGeneration() {

        pista.reset();

        this.calcColocacao();

        if (colocacao.length == 0) {
            this.firstGeneration();
            return

        }
        this.melhor = this.getMelhorCarro();

        if (!this.melhor) {
            return
        }
        this.saveWeights(this.melhor);

        let date = new Date();

        console.log(`**** G: ${nGeracao + 1}. ${date.getHours()}:${date.getMinutes()} MELHOR FOI (${this.melhor.id}): ${this.melhor.ranhurasColetadas.length} ran. Marca: ${this.melhor.marca}. KM: ${this.melhor.km} f1: ${this.melhor.ia.f1} f2: ${this.melhor.ia.f2} `);

        if (this.melhor.ranhurasColetadas.length > record) {
            foo.speak(`Atingiu ${this.melhor.ranhurasColetadas.length}!`);
            record = this.melhor.ranhurasColetadas.length;
        }

        if (this.melhor.km > pista.recordKm || this.melhor.ranhurasColetadas.length > pista.recordRanhuras) {

            pista.recordKm = this.melhor.km;
            pista.recordRanhuras = this.melhor.ranhurasColetadas.length;
            foo.speak(`quilômetro ${pista.recordKm.toFixed(0)}!`);
            this.melhor.ia.showWeights();
        }

        // pista.pistaTimeOut = ceil(this.melhor.aliveTime *1.1);

        evolucao.push(this.melhor);

        nGeracao++;
        hue = 0;

        cars = [];

        const weights = this.melhor.ia.model.getWeights();

        const weightCopies = [];
        for (let i = 0; i < weights.length; i++) {
            weightCopies[i] = weights[i].clone();
        }

        // Clonado e mutado.
        for (let i = 1; i < (quantidade / 3) * 0; i++) {

            let child = new Car('m');
            child.ia.model.setWeights(weightCopies);
            child.ia.mutate(0.1); // 0.1
            cars.push(child);

        }

        // Clonado e mutado.
        for (let i = 1; i < (quantidade / 3) * 3; i++) {

            let child = new Car('T');
            child.ia.model.setWeights(weightCopies);
            child.ia.mutate(0.05); // 0.1
            cars.push(child);

        }

        // Clonado (elitismo)
        if (elitism) {

            let child = new Car('c');
            child.ia.model.setWeights(weightCopies);
            cars.push(child);
        }

        vivos = cars.length;

    }

    setFlag() {

        if (pista) {
            const tmpMelhor = genetic.getMelhorCarro();
            if (tmpMelhor) {
                pista.setFlag(tmpMelhor.pos.x, tmpMelhor.pos.y, tmpMelhor.km);
                this.melhorCorrente = tmpMelhor;
            }
        }

    }

    getQuemMaisDeuReh(qtd) {

        console.log(`Primeiro: ${colocacao[0].km}`);

        let maiorReh = 0;
        let maiorI = 0;

        for (let i = 0; i < min(qtd, colocacao.length); i++) {

            car = colocacao[i];

            console.log(`${i}:  ${colocacao[i].km} -> ${colocacao[i].qtdReh}`);

            if (car.km > 0) {
                if (myRelu(colocacao[i].qtdReh) > maiorReh) {

                    maiorReh = myRelu(colocacao[i].qtdReh);
                    maiorI = i;
                }
            }
        }

        console.log('******* Maior ré é ->', colocacao[maiorI].qtdReh, ' km ', colocacao[maiorI].km, ' i: ', maiorI);
        return colocacao[maiorI];

    }

    getMelhorCarro() {

        // Captura quem tem mais ranhuras.

        let maisRanhuras = 0;
        let melhor = null;

        for (const car of cars) {

            if (car.ranhurasColetadas.length > maisRanhuras) {
                maisRanhuras = car.ranhurasColetadas.length;
                melhor = car;
            }
        }

        // console.log('getMelhorCarro() -> ', this.melhor.km, ' maisRanhuras: ', maisRanhuras);
        // fill(0,255,0);
        // circle(this.melhor.pos.x,this.melhor.pos.y,8);
        // noLoop();

        if (true) {

            if (maisRanhuras < 7 && pista.selectedPista == 2) {

                // Se empate, verifica desses qual tem melhor ângulo.

                let maiorHea = 0;

                for (const car of cars) {
                    if (car.ranhurasColetadas.length == maisRanhuras) {
                        if (car.heading > maiorHea) {
                            maiorHea = car.heading;
                            melhor = car;
                        }
                    }
                }

            } else {

                // Se empate, verifica desses qual tem melhor km.

                let maisKm = 0;

                for (const car of cars) {
                    if (car.ranhurasColetadas.length == maisRanhuras) {
                        if (car.km > maisKm) {
                            maisKm = car.km;
                            melhor = car;
                        }
                    }
                }
            }
        }

        //  // Se empate, soteia um.
        //  for (const car of cars) {
        //      if (car.ranhurasColetadas.length == maisRanhuras) {
        //          if (random(1) > 0.5) {
        //              melhor = car;
        //              break;
        //          }
        //      }
        //  }

        // console.log('Mais KM() -> ', this.melhor.km, ' maisRanhuras: ', maisRanhuras, ' maisKm: ', maisKm);
        // fill(0,0,255);
        // circle(this.melhor.pos.x,this.melhor.pos.y,8);
        // noLoop();


        return melhor;
    }

    funcSalvarMelhorCarro(melhor) {
        if (salvarMelhorCarro) {
            // localStorage.setItem('meuGato', 'Tom');

            // document.cookie = "username=ivan; expires=Thu, 18 Dec 2025 12:00:00 UTC; path=/";

            // try {
            //     console.log('Salvando carro... ', this.melhor.marca);
            //     await this.melhor.ia.model.save('indexeddb://caria-melhor');
            //     console.log('Salvo');
            //     // await this.melhor.ia.model.save('localstorage://caria-melhor');
            // } catch (err) {
            //     console.error(err);
            // }
        }
    }

    funcCarregarCarroSalvo() {
        if (carregarCarroSalvo) {
            // console.log(' leitura: ',localStorage.getItem('meuGato'));
            // console.log('cookie => ',document.cookie);
            // try {

            //     console.log('Carregando carro salvo...');
            //     const melhorSalvo = await tf.loadLayersModel('indexeddb://caria-melhor');

            //     let child = new Car('X');
            //     child.ia.model = null;
            //     child.ia.model = melhorSalvo
            //     cars.push(child);

            // } catch (err) {
            //     console.error(err);
            // }
            // melhorCarregado = true;
            // console.log('Carregado!')
        }

    }
    saveWeights(car) {
        const w = car.ia.showWeights(true);
        localStorage.setItem('melhor', w);
    }

    calcColocacao() {
        colocacao = [];
        for (let car of cars) {
            colocacao.push(car);
        }
        if (colocacao.length > 0) {
            colocacao.sort(function (a, b) { return b.km - a.km });
        }

    }


}